#include <stdlib.h>
#include <stdio.h>
#include <time.h>

#define Valeur_max 255;

typedef struct {
  int vie; /*PV actuel*/
  int force; /*Valeur offensive*/
  int vitalite; /*Valeur max de pv*/
  int agilite; /*taux supplementaire d'esquive*/
  int dexterite; /*Taux supplementaire de precision*/
  char nom[20]; /*nom du personnage*/
  int etat; /*etat*/
} personnages;

typedef personnages *personnage;

typedef struct{
  int degats;
  int etate; /*etat */
  int etata; /*etat affligé*/
  int priorite;
}coups;

typedef coups *coup;

int random(int x, int y){
  int alea;
  srand(time(NULL));
  alea = rand()%(y-x+1)+x;
  return alea;
}


void init_personnage(personnage p){
  p->force = 45 + random(-20, 20);
  p->agilite = 45 + random(-20, 20);
  p->dexterite = 45 + random(-20, 20);
  p->vitalite = 500 + random(-100, 100);
  p->vie = p->vitalite;
  p->etat = 1; /*1 = Vie, 0 = vie + a terre, -1= décès*/
}

void init_personnage_prin(personnage p){
  printf("Le nom de votre personnage en 19 lettres ou moins");
  scanf("%s", p->nom);
}

void init_personnage_enne(personnage p){

  p->nom[] = "Michel";
}

coup attaque(personnage p, personnage e){ /* p = Attaquant, e = Attaqué*/
  coup coupperso;
  /*Degats*/
  coupperso -> degats = p -> force;
  /*priorite*/

  coupperso->priorite = (p -> agilite) - (p -> dexterite)*1/2;
  coupperso -> etata = p -> etat;
  coupperso -> etate = e -> etat;

  return coupperso; /*coup inflige a l'ennemi*/
}

/*coup defense (personnage p, personnage e){ /*p = Attaquant, e = Attaqué*/
  /*coup coupperso;
  /*Degats*/

  /*priorite*/

  /*changement d'état*/

  /*return coupperso; /*coup inflige a l'ennemi*/
/*}

/*coup esquive (personnage p, personnage e){
  /*degats*/

  /*priorite*/

  /*changement d'etat*/
/*}*/

void calcul_du_tour(coup a, coup b, personnage aa, personnage bb){
  int egalite;
  if(a->priorite > b->priorite){
    aa->etat = a->etata;
    bb->etat = b->etate;
    bb->vie -= a->degats;
    if (bb->vie > 0){
      aa->vie -= b->degats;
    }
  }
  if(a->priorite < b->priorite){
    bb->etat = b->etata;
    aa->etat = a->etate;
    aa->vie -= b->degats;
    if (aa->vie > 0){
      bb->vie -= a->degats;
    }
  }
  if(a->priorite == b->priorite){
    egalite = random(0,100);
    if(egalite >50){
      aa->etat = a->etata;
      bb->etat = b->etate;
      bb->vie -= a->degats;
      if (bb->vie > 0){
        aa->vie -= b->degats;
      }
    }
    if(egalite <=50){
      bb->etat = b->etata;
      aa->etat = a->etate;
      aa->vie -= b->degats;
      if (aa->vie > 0){
        bb->vie -= a->degats;
      }
    }
  }
}


int main(){
  personnage principal;
  personnage ennemi;
  init_personnage(principal);
  init_personnage_prin(principal);
  init_personnage(ennemi);
  init_personnage_enne(ennemi);

  exit(1);
}
